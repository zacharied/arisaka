# {{{1 Setup

[[ -v ARISAKA_O_SHDEBUG ]] && echo "sourcing .zshrc"

# Allow custom completions.
fpath=("$ARI_ETC/zsh/completions" $fpath)

# Use aliases with sudo.
alias sudo='nocorrect sudo '

source "$ARI_ETC/zsh/env.zsh"
source "$ARI_ETC/zsh/alias.zsh"
source "$ARI_ETC/zsh/func.zsh"

[[ -f "$ARI_ETCL/zsh/func.zsh" ]] && source "$ARI_ETCL/zsh/func.zsh"

# {{{1 Options

setopt APPEND_HISTORY
setopt HIST_FIND_NO_DUPS

setopt NO_CLOBBER

setopt NO_BEEP

setopt EXTENDED_GLOB

# {{{1 Plugins

export LOCAL_ZPLUG="$HOME/.zplug"

if [[ -d "$LOCAL_ZPLUG" ]]; then
    source "$LOCAL_ZPLUG/init.zsh"
    
    # Sets up the necessary zplug plugins.
    zplug_do() {
	# Yeet
	zplug 'zsh-users/zsh-syntax-highlighting'

	# Completions
	zplug 'zsh-users/zsh-completions'
	zplug 'srijanshetty/zsh-pandoc-completion'

	# Nice stuff
	zplug 'zsh-users/zsh-history-substring-search'

	# Warp
	zplug 'mfaerevaag/wd', \
	    as:command, \
	    use:'wd.sh', \
	    hook-load:'wd() { . "$ZPLUG_REPOS/mfaerevaag/wd/wd.sh" }'

	# Libraries
	zplug 'molovo/crash', \
	    use:'crash', \
	    lazy:true

	zplug load
    }

    zplug_do

    unset -f zplug_do
else
    echo 'zplug not found.'
fi

# {{{1 Prompt

declare i last_status=0

prompt::top_line() {
    print -rP '%F{red}%n%f@%F{blue}%M%f:%B%~%b' "| $(prompt::dirstack)"
}

prompt::dirstack() {
    printf "$(dirs -p | wc -l)"
}

prompt::vi_mode_badge() {
    case "$KEYMAP" in
        vicmd)
            print -P '♭'
            ;;
        main|viins)
            print -P '♯'
            ;;
    esac
}

prompt::last_status_badge() {
    case "$last_status" in
        0)
            print ' '
            ;;
        *)
            print " ${last_status}"
            ;;
    esac
}

precmd() {
    # Update exit status.
    last_status=$?
}

function zle-line-init zle-keymap-select {
    PROMPT="$(prompt::top_line)
 $(prompt::last_status_badge) -- $(prompt::vi_mode_badge) "
    zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select

# {{{1 Keybindings

# Allow vi modes.
bindkey -v

# Exit insert mode.
bindkey -M viins 'jk' vi-cmd-mode

bindkey -M vicmd 'J' history-substring-search-down
bindkey -M vicmd 'K' history-substring-search-up

bindkey -M viins '^u' undo

# Open command line in editor.
autoload -Uz edit-command-line && zle -N edit-command-line
bindkey '^e' edit-command-line

# Completion keybindings
bindkey -M viins '^n' menu-complete
bindkey -M viins '^p' reverse-menu-complete

# {{{1 Completion

# Case insensitivity and dual-side mtaching.
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# }}}1

# vim: fdm=marker
